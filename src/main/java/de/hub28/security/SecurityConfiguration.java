package de.hub28.security;

import java.util.Optional;

import com.vaadin.flow.router.RouteConfiguration;
import com.vaadin.flow.server.RouteRegistry;
import com.vaadin.flow.server.VaadinSession;
import com.vaadin.flow.spring.security.VaadinWebSecurity;
import de.hub28.views.MainLayout;
import de.hub28.views.about.AboutAdminView;
import de.hub28.views.login.LoginView;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@EnableWebSecurity
@Configuration
@Slf4j
public class SecurityConfiguration extends VaadinWebSecurity {

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.authorizeHttpRequests(
                authorize -> authorize.requestMatchers(new AntPathRequestMatcher("/images/*.png")).permitAll());

        // Icons from the line-awesome addon
        http.authorizeHttpRequests(authorize -> authorize
                .requestMatchers(new AntPathRequestMatcher("/line-awesome/**/*.svg")).permitAll());

        super.configure(http);
        setLoginView(http, LoginView.class);
    }

    @Bean
    public InMemoryUserDetailsManager userDetailsService() {
        UserDetails user1 = User.withDefaultPasswordEncoder()
            .username("user")
            .password("user")
            .roles("USER")
            .build();
        UserDetails user2 = User.withDefaultPasswordEncoder()
            .username("admin")
            .password("admin")
            .roles("ADMIN")
            .build();
        return new InMemoryUserDetailsManager(user1, user2);
    }

    @Bean
    public ApplicationListener<ApplicationEvent> successHandler() {

        return event -> {
            if (event instanceof InteractiveAuthenticationSuccessEvent authSuccessEvent) {
                var source = (UsernamePasswordAuthenticationToken)authSuccessEvent.getAuthentication();
                if (source.getPrincipal() instanceof UserDetails userDetails) {
                    log.debug("Erfolgrreiche Anmeldung von {}", source.getPrincipal());
                    if (VaadinSession.getCurrent() != null) {
                        log.debug("### session NOT null");
                        RouteConfiguration.forSessionScope().setRoute("", AboutAdminView.class, MainLayout.class);
                    } else {
                        log.debug("###  session is null");
                    }
                }
            }
        };
    }

}