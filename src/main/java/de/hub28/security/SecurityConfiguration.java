package de.hub28.security;

import java.io.IOException;
import java.util.Optional;

import com.vaadin.flow.component.UI;
import com.vaadin.flow.router.RouteConfiguration;
import com.vaadin.flow.server.RouteRegistry;
import com.vaadin.flow.server.SessionRouteRegistry;
import com.vaadin.flow.server.VaadinSession;
import com.vaadin.flow.spring.security.VaadinSavedRequestAwareAuthenticationSuccessHandler;
import com.vaadin.flow.spring.security.VaadinWebSecurity;
import de.hub28.views.MainLayout;
import de.hub28.views.about.AboutAdminView;
import de.hub28.views.login.LoginView;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.savedrequest.RequestCache;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@EnableWebSecurity
@Configuration
@Slf4j
public class SecurityConfiguration extends VaadinWebSecurity {

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.authorizeHttpRequests(
                authorize -> authorize.requestMatchers(new AntPathRequestMatcher("/images/*.png")).permitAll());

        // Icons from the line-awesome addon
        http.authorizeHttpRequests(authorize -> authorize
                .requestMatchers(new AntPathRequestMatcher("/line-awesome/**/*.svg")).permitAll());

        super.configure(http);
        setLoginView(http, LoginView.class);

        http.formLogin(login -> login.successHandler(new AuthenticationSuccessHandler() {
            @Override
            public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {

                if (authentication.getPrincipal() instanceof UserDetails userDetails) {
                    GrantedAuthority role = userDetails.getAuthorities().stream().findFirst().get();
                    if (role.getAuthority().equals("ROLE_ADMIN")) {
                        Optional<VaadinSession> vaadinSession = VaadinSession.getAllSessions(request.getSession()).stream().findFirst();
                        if (vaadinSession.isPresent()) {
                            try {
                                vaadinSession.get().lock();
                                RouteRegistry sessionRouteRegistry = SessionRouteRegistry.getSessionRegistry(vaadinSession.get());
                                RouteConfiguration.forRegistry(sessionRouteRegistry).setRoute("", AboutAdminView.class, MainLayout.class);
                            } catch(Exception ex) {
                                log.error("Fehler bei der dyn. Routen Definition", ex);
                            } finally {
                                vaadinSession.get().unlock();
                            }
                        }
                    }
                }

                getVaadinSavedRequestAwareAuthenticationSuccessHandler(http).onAuthenticationSuccess(request, response, authentication);
            }
        }));
    }

    // see https://github.com/vaadin/flow/issues/18071
    // this is copy'n'paste from VaadinWebSecurity.getVaadinSavedRequestAwareAuthenticationSuccessHandler
    private VaadinSavedRequestAwareAuthenticationSuccessHandler getVaadinSavedRequestAwareAuthenticationSuccessHandler(HttpSecurity http) {
        VaadinSavedRequestAwareAuthenticationSuccessHandler vaadinSavedRequestAwareAuthenticationSuccessHandler = new VaadinSavedRequestAwareAuthenticationSuccessHandler();
        vaadinSavedRequestAwareAuthenticationSuccessHandler.setDefaultTargetUrl(this.applyUrlMapping(""));
        RequestCache requestCache = (RequestCache)http.getSharedObject(RequestCache.class);
        if (requestCache != null) {
            vaadinSavedRequestAwareAuthenticationSuccessHandler.setRequestCache(requestCache);
        }

        http.setSharedObject(VaadinSavedRequestAwareAuthenticationSuccessHandler.class, vaadinSavedRequestAwareAuthenticationSuccessHandler);
        return vaadinSavedRequestAwareAuthenticationSuccessHandler;
    }

    @Bean
    public InMemoryUserDetailsManager userDetailsService() {
        UserDetails user1 = User.withDefaultPasswordEncoder()
            .username("user")
            .password("user")
            .roles("USER")
            .build();
        UserDetails user2 = User.withDefaultPasswordEncoder()
            .username("admin")
            .password("admin")
            .roles("ADMIN")
            .build();
        return new InMemoryUserDetailsManager(user1, user2);
    }

    @Bean
    public ApplicationListener<ApplicationEvent> successHandler() {

        return event -> {
            if (event instanceof InteractiveAuthenticationSuccessEvent authSuccessEvent) {
                var source = (UsernamePasswordAuthenticationToken)authSuccessEvent.getAuthentication();
                if (source.getPrincipal() instanceof UserDetails userDetails) {
                    log.debug("Erfolgrreiche Anmeldung von {}", source.getPrincipal());
                    if (VaadinSession.getCurrent() != null) {
                        log.debug("### session NOT null");
                        RouteConfiguration.forSessionScope().setRoute("", AboutAdminView.class, MainLayout.class);
                    } else {
                        log.debug("###  session is null");
                    }
                }
            }
        };
    }

}